                COMP 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
| Keeper of the record: Jake Jarvis (jjarvi01)           |
|--------------------------------------------------------|
| Other group member(s): Tam Luong (tluong04)            |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, I.e. an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (I.e. help us be sure you know which is which!):

Boxed collections store pointers to the object they're storing, while
unboxed collections store the actual object. In an boxed collection, 
the collection doesn't know what the object is, only where it is. 
Unboxed collections are aware of what the object is, its data type,
and its size.


1B: List two (or more) advantages of the boxed representation.

- The objects being stored can be any data type (polymorphic).


- The objects being stored can be any size. All that matters is 
  that the pointer is the same size (always 8 bits).


1C: List two (or more) advantages of an unboxed representation.

- The client knows exactly what data type and size the objects
  being stored are. This saves a bit of time because you don't
  have to follow the pointer to check what the object's data type
  is. 

- It is easier to recursively iterate through the array, because
  each element can be established in terms of one another and one
  can contain a pointer to the next element in the list.


1D: Look at the interface to UArray (the pointer to an interface
    summary is in the lab instructions). Discuss the methods that show
    the use of the unboxed style. Why, for example, does UArray_new
    take both a number of elements and an element size? 

Right from initialization, the UArray must know the size of the object
as well as the number of those objects to know how much memory to 
allocate, and the data type of all the objects that will be stored. 


PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 7x5 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?

There would be eight 1D arrays total. The first would include 7 
pointers, each to its own 1D array. If a user tried to store
something in [3,6], we would first access the fourth element
in the main array and then follow the pointer to the nested 1D array.
But because that array only stores five values, index 6 would be
out of bounds. We should return an error message. If it were [6,3],
we would access the seventh element in the first array and follow the
pointer to the nested 1D array, and store the value in the fourth
index there.


2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assumingg
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 1D array where a value [x,y], would go in the
    1D array.

We would initialize a 1D array of size 35 (7 * 5, or x * y). We would 
section off the array so that each of the 7 sections has 5 consecutive 
indices. So, to store something in [x,y], we would first multiply 
x by 7, then add y to that number and store it in that index, which
is (x * 7) + y. For example, if we wanted to store something in [3, 2]
we would use index 23.


2C. (optional) is there another mapping that would work as well?

Another way to map the indexes would be to reverse the x and y in the 
above formula. The array would still hold 35 indices. Then, if we were
to store something in [x, y], we would multiply y by 7, then add x to 
that number and store it in that index (so, (y * 7) + x). For example,
if we wanted to store something in [3, 2], we would use index 17.


PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics 
    of the UArray2 interface that you learned from reading useuarray2.c
    and from running correct_useuarray2.

- UArray2_map_col_major() iterates through the 2D array by columns first. In 
  other words, the iterator goes horizontally across the array before going
  down (so that [0,0] to [0,y] is hit before [1,0]).

- UArray2_map_row_major() does the opposite. [0,0] to [x,0] is accessed 
  before [1,0].

- We learned about the & operator and what it means in terms of &=. It is a 
  simpler way of setting a boolean equal to true or false depending on the 
  truth of another condition, compared to using if/else statements.






